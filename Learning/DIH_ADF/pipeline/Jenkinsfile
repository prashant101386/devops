node ('JC') {

   stage('Init') {
      checkout scm
   }


   stage('Vault'){}

   stage('Deploy') {
      withCredentials([
         string(credentialsId: 'subscriptionID', variable: 'TF_VAR_subscription_id'),
         string(credentialsId: 'clientID', variable: 'TF_VAR_client_id'),
         string(credentialsId: 'clientSecret', variable: 'TF_VAR_client_secret'),
         string(credentialsId: 'tenantID', variable: 'TF_VAR_tenant_id'),
         string(credentialsId: 'subscriptionID', variable: 'ARM_SUBSCRIPTION_ID'),
         string(credentialsId: 'clientID', variable: 'ARM_CLIENT_ID'),
         string(credentialsId: 'clientSecret', variable: 'ARM_CLIENT_SECRET'),
         string(credentialsId: 'tenantID', variable: 'ARM_TENANT_ID'),
      ]){
                     withEnv(["TF_LOG=ERROR"]){
                     sh 'az login --service-principal --username $ARM_CLIENT_ID --password $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID'
                     sh 'az account set --subscription=$ARM_SUBSCRIPTION_ID'

                     sh """
                           terraform init \
                                       -reconfigure \
                                       -input=false \
                                       ./Learning/DIH_ADF
                     """
                     sh """
                           terraform ${params.ApplyOrDestroy} -auto-approve \
                                                               -var-file ./Learning/DIH_ADF/devinput.vars \
                                                               -var "access_key=${TF_VAR_backend_state}" \
                                                               ./Learning/DIH_ADF
                     """
                  }
            }
         }
      }
   
