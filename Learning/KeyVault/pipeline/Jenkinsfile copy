node ('DIPLATFORM_STNAACVDL237_ITC-NM') {

   stage('Init') {
         checkout scm
   }

   stage('Vault'){}
//string(credentialsId: 'backEndState', variable: 'TF_VAR_backend_state'),
         //certificate(aliasVariable: '', credentialsId: 'envCertificate', keystoreVariable: 'TF_VAR_certificate', passwordVariable: 'TF_VAR_password'),
   stage('Deploy') {
      withCredentials([
         string(credentialsId: 'subscriptionID', variable: 'TF_VAR_subscription_id'),
         string(credentialsId: 'clientID', variable: 'TF_VAR_client_id'),
         string(credentialsId: 'clientSecret', variable: 'TF_VAR_client_secret'),
         string(credentialsId: 'tenantID', variable: 'TF_VAR_tenant_id'),
         string(credentialsId: 'subscriptionID', variable: 'ARM_SUBSCRIPTION_ID'),
         string(credentialsId: 'clientID', variable: 'ARM_CLIENT_ID'),
         string(credentialsId: 'clientSecret', variable: 'ARM_CLIENT_SECRET'),
         string(credentialsId: 'tenantID', variable: 'ARM_TENANT_ID'),
         ]) {
         withEnv(["http_proxy=http://appproxy.us164.corpintra.net:3128"]){
            withEnv(["https_proxy=http://appproxy.us164.corpintra.net:3128"]){
                  withEnv(["TF_LOG=ERROR"]){

                     echo "Client ID"
                     echo $ARM_CLIENT_ID
                     echo $TF_VAR_client_id
                     echo 'clientSecret: "${ARM_CLIENT_SECRET}'
                     echo 'tenantID: "${ARM_TENANT_ID}'
                     echo 'subscriptionID: "${ARM_SUBSCRIPTION_ID}'

                     sh 'az login --service-principal --username $ARM_CLIENT_ID --password $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID'
                     sh 'az account set --subscription=$ARM_SUBSCRIPTION_ID'
/*
                     sh '''
                           terraform init \
                                     -reconfigure \
                                     -input=false \
                                     -backend-config="access_key=$TF_VAR_backend_state" \
                                     ./environment/dataIntelligencePlatform/keyVault
                     '''
*/                     
                    sh '''
                           terraform init \
                                       -input=false \
                                       ./environment/dataIntelligencePlatform/keyVault
                     '''
                      
                     sh """
                           terraform ${params.ApplyOrDestroy} -auto-approve \
                                                              -var-file ./environment/dataIntelligencePlatform/keyVault/${params.environmentLevel}input.vars \
                                                              ./environment/dataIntelligencePlatform/keyVault
                     """
                  }
            }    
         }
      }
   }
}